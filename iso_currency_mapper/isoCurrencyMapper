#!/usr/bin/env perl

#####################################################################
# 																	
# A simple script to extract currecy code to currency symbol info	
# and create a property file out of it.							
#																	
#####################################################################

use strict;
use warnings;

use Getopt::Long;
use IO::File;
use Digest::MD5;
use File::Fetch;

# ignore previous download failure
$File::Fetch::METHOD_FAIL = {};
# ignore ssl verification (not recommended in general!)
$ENV{'PERL_LWP_SSL_VERIFY_HOSTNAME'} = 0;

sub fetch_iso_currency_file {
	my $file_url = 'http://raw.githubusercontent.com/zwacky/isoCurrency/master/dist/isoCurrency.js';
	my $ff = File::Fetch->new(uri => $file_url);
    # fetch the uri to cwd()
    $ff->fetch() or die "Error downloading from $file_url due to $! : $ff->error";
}

sub extract_currency_symbols {

	my $basename = 'isoCurrency';
	my $inFile   = $basename.".js";
	my $outFile  = $basename.".properties";

	my $first;
	my $second;
	my $present = "";

	unlink $inFile;
	# download a fresh copy from internet (because it could have been updated)
	fetch_iso_currency_file();

	open(my $fi, '<:encoding(UTF-8)', $inFile) 
		or die "Could not open file '$inFile' $!";

	unlink $outFile;
	open(my $fo, '>:encoding(UTF-8)', $outFile) 
		or die "Could not open file '$outFile' $!";

	while (my $row = <$fi>) {
		chomp $row;

		# depend on return instruction being present on the isoCurrency.js to terminate the loop
		if ($row =~ m/return/) {
			last;
		}

		if ($row =~ m{:}) {

			if ($row =~ m/{/) {

				$first = (split /\:/, $row)[0];
				$first =~ s/'/"/g;
				$first =~ s/^\s+//;
			
			} elsif ($row =~ m/symbol/) {

				$second = (split /\:/, $row)[1];
				$second =~ s/'/"/g;
				
				$present = "true" unless $second =~ m/false/;
			}
		}

		if ($present eq "true") {
			$present = "";
			print $fo $first."=".$second."\n";
		}
	}

	close $fo;
}

&extract_currency_symbols